# grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7
# 
# lambda-stack jupyter notebook with gpu suppport (nvidia CUDA10.1 cuDNN7)
# github.com/lambdal/lambda-stack-dockerfiles
#
# docker build -t grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7 -f Dockerfile.$(lsb_release -cs) https://github.com/grez72/notebooks.git#master:ubuntu18.04/cuda10.1-cudnn7/lambda-stack
# docker run -it --rm --user root grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7 bash
# docker run -it --rm --user root grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7 nvidia-smi
# docker run -it --rm --shm-size=2G -p 8889:8888 grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7 jupyterhub
# docker run -it --rm --shm-size=2G -p 8889:8888 -e JUPYTERHUB_API_TOKEN=testing123 -e CLIENT_ID=testing123 grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7
# docker run -it --rm --shm-size=2G -p 8889:8888 grez72/lambda-stack:ubuntu18.04-cuda10.1-cudnn7 jupyter lab --ip=0.0.0.0 --allow-root
# ENTRYPOINT ["jupyter", "lab","--ip=0.0.0.0","--allow-root"]

FROM ubuntu:18.04

WORKDIR /root/

# Add libcuda dummy dependency
ADD control .
RUN apt-get update && \
	apt-get install --yes equivs && \
	equivs-build control && \
	dpkg -i libcuda1-dummy_10.0_all.deb && \
	rm control libcuda1-dummy_10.0_all.deb && \
	apt-get remove --yes --purge --autoremove equivs && \
	rm -rf /var/lib/apt/lists/*

# Setup Lambda repository
ADD lambda.gpg .
RUN apt-get update && \
	apt-get install --yes gnupg && \
	apt-key add lambda.gpg && \
	rm lambda.gpg && \
	echo "deb http://archive.lambdalabs.com/ubuntu bionic main" > /etc/apt/sources.list.d/lambda.list && \
	echo "Package: *" > /etc/apt/preferences.d/lambda && \
	echo "Pin: origin archive.lambdalabs.com" >> /etc/apt/preferences.d/lambda && \
	echo "Pin-Priority: 1001" >> /etc/apt/preferences.d/lambda && \
	echo "cudnn cudnn/license_preseed select ACCEPT" | debconf-set-selections && \
	apt-get update && \
	DEBIAN_FRONTEND=noninteractive \
	apt-get install --no-install-recommends --yes lambda-stack-cuda lambda-server && \
	rm -rf /var/lib/apt/lists/*

# Setup for nvidia-docker
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.0"
ENV CUDA_DEVICE_ORDER=PCI_BUS_ID

# install latest of all packages
RUN apt-get update && sudo apt-get dist-upgrade && sudo apt-get autoremove

#--------------------------------------
#   A few extras
#--------------------------------------

RUN pip uninstall -y pillow pil jpeg libtiff libjpeg-turbo \
	&& pip install libjpeg-turbo \
	&& CFLAGS="${CFLAGS} -mavx2" pip install --upgrade --no-cache-dir --force-reinstall --no-binary :all: --compile pillow-simd \
	&& pip install jpeg libtiff

#--------------------------------------
#   Configure for notebook use
#--------------------------------------

# Setup for JupyterHub / DockerSpawner
# https://github.com/jupyterhub/dockerspawner
RUN pip3 install \
	jupyterhub==1.0.* \
	'notebook>=5.0,<=6.0' \
	'jupyterlab==1.1.*'

RUN apt-get update && \
	apt-get install --yes nodejs npm && \
	jupyter labextension install @jupyter-widgets/jupyterlab-manager@1.0 && \
	npm cache clean --force

RUN apt-get clean && apt-get update && apt-get install -y locales && \
	echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
	locale-gen

ENV SHELL=/bin/bash \
	NB_USER=jovyan \
	NB_UID=1000 \
	NB_GID=100 \
	LC_ALL=en_US.UTF-8 \
	LANG=en_US.UTF-8 \
	LANGUAGE=en_US.UTF-8 \
	JUPYTER_ENABLE_LAB=1

ENV HOME=/home/$NB_USER

ADD fix-permissions /usr/local/bin/fix-permissions
# RUN chmod u+x /usr/local/bin/fix-permissions
# Create jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN groupadd wheel -g 11 && \
	echo "auth required pam_wheel.so use_uid" >> /etc/pam.d/su && \
	useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
	chmod g+w /etc/passwd && \
	fix-permissions $HOME

# Setup work directory
USER root

RUN mkdir /home/$NB_USER/work && \
	fix-permissions /home/$NB_USER

WORKDIR $HOME/work

# Add Tini
ENV TINI_VERSION v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini
ENTRYPOINT ["/tini", "-g", "--"]
CMD ["start-notebook.sh"]

# Add local files as late as possible to avoid cache busting
COPY credential-helper.sh /usr/local/bin/
COPY start.sh /usr/local/bin/
COPY start-notebook.sh /usr/local/bin/
COPY start-singleuser.sh /usr/local/bin/
COPY jupyter_notebook_config.py /etc/jupyter/
COPY genpass.py .
RUN fix-permissions /etc/jupyter/

WORKDIR $HOME/work

# Switch back to jovyan to avoid accidental container runs as root
USER $NB_UID

# CMD ["jupyterhub-singleuser", "--ip", "0.0.0.0"]
# RUN pip install jupyter -U && pip install jupyterlab
# ENTRYPOINT ["jupyter", "lab","--ip=0.0.0.0","--allow-root"]
